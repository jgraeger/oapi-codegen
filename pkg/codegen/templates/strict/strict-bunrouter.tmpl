type StrictHandlerFunc = runtime.StrictBunrouterHandlerFunc
type StrictMiddlewareFunc = runtime.StrictBunrouterMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
    return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
    ssi StrictServerInterface
    middlewares []StrictMiddlewareFunc
}

{{range .}}
    {{$opid := .OperationId}}
    // {{$opid}} operation middleware
    func (sh *strictHandler) {{$opid}}(w http.ResponseWriter, r bunrouter.Request{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{$opid}}Params{{end}}) error {
        var request {{$opid | ucFirst}}RequestObject

        {{range .PathParams -}}
            request.{{.GoName}} = {{.GoVariableName}}
        {{end -}}

        {{if .RequiresParamObject -}}
            request.Params = params
        {{end -}}

        {{ if .HasMaskedRequestContentTypes -}}
            request.ContentType = r.Header.Get("Content-Type")
        {{end -}}

        {{$multipleBodies := gt (len .Bodies) 1 -}}
        {{range .Bodies -}}
            {{if $multipleBodies}}if strings.HasPrefix(r.Header.Get("Content-Type"), "{{.ContentType}}") { {{end}}
                {{if eq .NameTag "JSON" -}}
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
                        return fmt.Errorf("decode JSON body: %w", err)
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Formdata" -}}
                    if err := r.ParseForm(); err != nil {
                        return fmt.Errorf("decode formdata: %w", err)
                    }
                    var body {{$opid}}{{.NameTag}}RequestBody
                    if err := runtime.BindForm(&body, r.Form, nil, nil); err != nil {
                        return fmt.Errorf("bind formdata: %w", err)
                    }
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else if eq .NameTag "Multipart" -}}
                    if reader, err := r.MultipartReader(); err != nil {
                        return fmt.Errorf("decode multipart: %w", err)
                    } else {
                        request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                    }
                {{else if eq .NameTag "Text" -}}
                    data, err := io.ReadAll(r.Body)
                    defer r.Body.Close()
                    if err != nil {
                        return fmt.Errorf("read request body: %w", err)
                    }
                    body := {{$opid}}{{.NameTag}}RequestBody(data)
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
                {{else -}}
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = r.Body
                {{end}}{{/* if eq .NameTag "JSON" */}}
            {{if $multipleBodies}}}{{end}}
        {{end}}{{/* range .Bodies */}}

        handler := func(ctx context.Context, w http.ResponseWriter, r bunrouter.Request, request interface{}) (interface{}, error) {
            return sh.ssi.{{$opid}}(ctx, request.({{$opid | ucFirst}}RequestObject))
        }
        for _, middleware := range sh.middlewares {
            handler = middleware(handler, "{{$opid}}")
        }

        response, err := handler(r.Context(), w, r, request)

        if err != nil {
            return err
        } else if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
            return validResponse.Visit{{$opid}}Response(w)
        } else if response != nil {
            return fmt.Errorf("unexpected response type: %T", response)
        }
        return nil
    }
{{end}}